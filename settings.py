from csv import reader 
from os import walk 
import pygame 

# Game settings 
WIDTH, HEIGHT = 1280,720
FPS = 60

player_img = ['./assets/Player/player.png','./assets/Player/player.png']
bamboo_img = ['./assets/Player/bamboo_1.png']
tiles_img = ['./assets/Tiles/tile1.png','./assets/Tiles/slab.png','./assets/Player/bamboo_1.png']
items_img = ['./assets/Tiles/coin.png','./assets/Tiles/fruit.png']

# Sprite Groups
visable_sprite = pygame.sprite.Group()
collide_sprite = pygame.sprite.Group()
player_sprite = pygame.sprite.Group()
bamboo_sprite = pygame.sprite.Group()
trap_sprite = pygame.sprite.Group()
coin = pygame.sprite.Group()

# Order of sprite groups
groups = {
    "bamboo":bamboo_sprite,
    "collide":collide_sprite,
    "item":item,
    "player":player_sprite,
    "trap":trap_sprite
}

#### Level legend and Levels
# x: grass_tile
# n: dirt tile 
# p: player
# l: coin
# s: stone slab
# t: trap_1 

level_1 = [
    ['','','','','p','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','t','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','b','b','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','s','','t','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','t','x','n','n','n','n','n','n','n','','','','','',''],
    ['','','','','s','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','s','l','t','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','l','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','l','','s','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','b','x','n','n','n','n','n','n','','','','','','',''],
]
empty = [
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
    ['','','','','','','','','','','','','','','','','','','',''],
]
grass_plains = [
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
    ['','','','','','','x','n','n','n','n','n','n','','','','','','',''],
]
# Reused Functions 
def gravity(self,falling):
     if falling == True:
          self.direction.y += self.gravity
          self.rect.y += self.direction.y
          
def collision_v(self,sprite):
        gravity(self,self.is_falling)
        for s in sprite:
            if s.rect.colliderect(self.rect):
                self.is_ground = True
                if self.direction.y > 0: 
                    self.rect.bottom = s.rect.top
                    self.direction.y = 0
                elif self.direction.y < 0:
                    self.rect.top = s.rect.bottom
                    self.direction.y = 0

def collision_h(self,sprite):
        self.rect.x += self.direction.x * self.vel
        for s in sprite:
            if s.rect.colliderect(self.rect):
                if self.direction.x < 0:
                    self.rect.left = s.rect.right
                elif self.direction.x > 0:
                    self.rect.right = s.rect.left
